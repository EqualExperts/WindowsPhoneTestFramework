// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UnitConverter.Spec
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Distance")]
    public partial class DistanceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DistanceConversion.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Distance", "In order to use the converter appliction\r\nAs a WP7 user\r\nI want to enter some num" +
                    "bers and see the results", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Main Page loads with expected default values")]
        public virtual void MainPageLoadsWithExpectedDefaultValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Main Page loads with expected default values", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("my app is clean installed and running");
#line 8
 testRunner.Then("take a picture");
#line 9
 testRunner.And("I see the control \"textBlockCategory\" has value \"LENGTH\"");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table1.AddRow(new string[] {
                        "textBlockCategory",
                        "LENGTH"});
            table1.AddRow(new string[] {
                        "textBlockInputValue",
                        "0"});
            table1.AddRow(new string[] {
                        "textBlockResultValue",
                        "0"});
            table1.AddRow(new string[] {
                        "textBlockInputUnit",
                        "Inches"});
            table1.AddRow(new string[] {
                        "textBlockResultUnit",
                        "Feet"});
#line 10
 testRunner.And("I see the values", ((string)(null)), table1);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Keypad button 5 updates the input and Result fields")]
        public virtual void KeypadButton5UpdatesTheInputAndResultFields()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Keypad button 5 updates the input and Result fields", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("my app is clean installed and running");
#line 20
 testRunner.Then("take a picture");
#line 21
 testRunner.And("I see the control \"textBlockInputValue\" has value \"0\"");
#line 22
 testRunner.Then("I press the control \"btnKeypadKey5\"");
#line 23
 testRunner.Then("take a picture");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table2.AddRow(new string[] {
                        "textBlockCategory",
                        "LENGTH"});
            table2.AddRow(new string[] {
                        "textBlockInputUnit",
                        "Inches"});
            table2.AddRow(new string[] {
                        "textBlockResultUnit",
                        "Feet"});
            table2.AddRow(new string[] {
                        "textBlockInputValue",
                        "5"});
            table2.AddRow(new string[] {
                        "textBlockResultValue",
                        "0.416666667"});
#line 24
 testRunner.And("I see the values", ((string)(null)), table2);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple keypad buttons update the input fields")]
        public virtual void MultipleKeypadButtonsUpdateTheInputFields()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple keypad buttons update the input fields", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("my app is clean installed and running");
#line 34
 testRunner.Then("take a picture");
#line 35
 testRunner.And("I see the control \"textBlockInputValue\" has value \"0\"");
#line 36
 testRunner.Then("I press the control \"btnKeypadKey2\"");
#line 37
 testRunner.Then("take a picture");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table3.AddRow(new string[] {
                        "textBlockCategory",
                        "LENGTH"});
            table3.AddRow(new string[] {
                        "textBlockInputUnit",
                        "Inches"});
            table3.AddRow(new string[] {
                        "textBlockResultUnit",
                        "Feet"});
            table3.AddRow(new string[] {
                        "textBlockInputValue",
                        "2"});
            table3.AddRow(new string[] {
                        "textBlockResultValue",
                        "0.166666667"});
#line 38
 testRunner.And("I see the values", ((string)(null)), table3);
#line 45
 testRunner.Then("I press the control \"btnKeypadKey4\"");
#line 46
 testRunner.Then("take a picture");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table4.AddRow(new string[] {
                        "textBlockCategory",
                        "LENGTH"});
            table4.AddRow(new string[] {
                        "textBlockInputUnit",
                        "Inches"});
            table4.AddRow(new string[] {
                        "textBlockResultUnit",
                        "Feet"});
            table4.AddRow(new string[] {
                        "textBlockInputValue",
                        "24"});
            table4.AddRow(new string[] {
                        "textBlockResultValue",
                        "2"});
#line 47
 testRunner.And("I see the values", ((string)(null)), table4);
#line 54
 testRunner.Then("I press the control \"btnKeypadKeyPoint\"");
#line 55
 testRunner.Then("take a picture");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table5.AddRow(new string[] {
                        "textBlockCategory",
                        "LENGTH"});
            table5.AddRow(new string[] {
                        "textBlockInputUnit",
                        "Inches"});
            table5.AddRow(new string[] {
                        "textBlockResultUnit",
                        "Feet"});
            table5.AddRow(new string[] {
                        "textBlockInputValue",
                        "24."});
            table5.AddRow(new string[] {
                        "textBlockResultValue",
                        "2"});
#line 56
 testRunner.And("I see the values", ((string)(null)), table5);
#line 63
 testRunner.Then("I press the control \"btnKeypadKey1\"");
#line 64
 testRunner.Then("I press the control \"btnKeypadKey2\"");
#line 65
 testRunner.Then("take a picture");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table6.AddRow(new string[] {
                        "textBlockCategory",
                        "LENGTH"});
            table6.AddRow(new string[] {
                        "textBlockInputUnit",
                        "Inches"});
            table6.AddRow(new string[] {
                        "textBlockResultUnit",
                        "Feet"});
            table6.AddRow(new string[] {
                        "textBlockInputValue",
                        "24.12"});
            table6.AddRow(new string[] {
                        "textBlockResultValue",
                        "2.01"});
#line 66
 testRunner.And("I see the values", ((string)(null)), table6);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The switch button works")]
        public virtual void TheSwitchButtonWorks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The switch button works", ((string[])(null)));
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
 testRunner.Given("my app is clean installed and running");
#line 76
 testRunner.Then("take a picture");
#line 77
 testRunner.And("I see the control \"textBlockInputValue\" has value \"0\"");
#line 78
 testRunner.Then("I press the control \"btnKeypadKey5\"");
#line 79
 testRunner.Then("take a picture");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table7.AddRow(new string[] {
                        "textBlockCategory",
                        "LENGTH"});
            table7.AddRow(new string[] {
                        "textBlockInputUnit",
                        "Inches"});
            table7.AddRow(new string[] {
                        "textBlockResultUnit",
                        "Feet"});
            table7.AddRow(new string[] {
                        "textBlockInputValue",
                        "5"});
            table7.AddRow(new string[] {
                        "textBlockResultValue",
                        "0.416666667"});
#line 80
 testRunner.And("I see the values", ((string)(null)), table7);
#line 87
 testRunner.Then("I press the control \"btnKeypadSwitchSourceTargetUnit\"");
#line 88
 testRunner.Then("take a picture");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table8.AddRow(new string[] {
                        "textBlockCategory",
                        "LENGTH"});
            table8.AddRow(new string[] {
                        "textBlockInputUnit",
                        "Feet"});
            table8.AddRow(new string[] {
                        "textBlockResultUnit",
                        "Inches"});
            table8.AddRow(new string[] {
                        "textBlockInputValue",
                        "0.416666667"});
            table8.AddRow(new string[] {
                        "textBlockResultValue",
                        "5.000000004"});
#line 89
 testRunner.And("I see the values", ((string)(null)), table8);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
